#include "cache.h"
#include "ooo_cpu.h"
#include <fstream>
#include <unordered_map>

using namespace std;


// vector<uint64_t> trace_array;

map<uint64_t, int> rrip; // map from block address to rereference interval prediction
int m;
int default_insertion_interval;
int saturating_max;
int distant_prediction;

/* initialize cache replacement state */
void CACHE::llc_initialize_replacement()
{
    // put your own initialization code here
    m = 5;
    saturating_max = 1 << m; 
    distant_prediction = saturating_max - 1;
    default_insertion_interval = (1 << m) - 2;
}

int saturating_increment(int n) {
    if(n == (saturating_max - 1)) {
	return saturating_max;
    }
    else {
	return n + 1;
    }
}
int saturating_decrement(int n) {
    if(n == 1) {
	return 0;
    }
    else {
	return n - 1;
    }
}

/* find a cache block to evict
 * return value should be 0 ~ 15 (corresponds to # of ways in cache) 
 * current_set: an array of BLOCK, of size 16 */
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t pc, uint64_t full_addr, uint32_t type)
{
    /* don't modify this code or put anything above it;
     * if there's an invalid block, we don't need to evict any valid ones */
    for (int way = 0; way < LLC_WAY; way++) {
        if (current_set[way].valid == false) {
            return way;
        }
    }

    // your eviction policy goes here
    while(true) { // terminated by returning from function
	for(int current_way = 0; current_way < LLC_WAY; current_way++) {
	    if(rrip.count(current_set[current_way].address) != 1) {
		cout << "SANITY ERROR: address not initialized when referenced" << endl;
	    }
	    int current_predicted_interval = rrip[current_set[current_way].address];
	    if(current_predicted_interval == distant_prediction) {
		return current_way;
	    }
	}
	// couldn't find a cache-way to use, so incrementing all of them
	for(int current_way = 0; current_way < LLC_WAY; current_way++) {
	    uint64_t block_addr = current_set[current_way].address;
	    rrip[block_addr] = saturating_increment(rrip[block_addr]);
	}
    }
}

/* called on every cache hit and cache fill */
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t pc, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    /* don't modify this code or put anythin above it;
     * OPT doesn't care about writebacks */
    if (type == WRITEBACK)
        return;
    // your code goes here
    // rrip training
    uint64_t block_addr = full_addr >> LOG2_BLOCK_SIZE;
    if(hit) {
	rrip[block_addr] = saturating_decrement(rrip[block_addr]);
    }
    else {
	rrip[block_addr] = default_insertion_interval;
    }
}

/* called at the end of the simulation */
void CACHE::llc_replacement_final_stats()
{
  // your code goes here
}
