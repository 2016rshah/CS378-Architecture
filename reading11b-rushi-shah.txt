Paper: Semantic Locality and Context-based Prefetching Using Reinforcement Learning by Peled, Mannor, Weiser, and Etsion

<b>Summary:</b>

This paper introduces the notion of "semantic locality": elements of a program that are semantically related, even if the layout of memory does not spatially correlate them. For example, a linked list might be an array or a set of pointers which have different spatial localities, but they share semantic locality. Using reinforcement learning over machine context we can approximate this semantic locality to build an effective prefetcher. 

<b>My thoughts/questions/extensions:</b>

What is the difference between semantic locality and temporal locality? When would two elements be semantically local but not temporally local? Perhaps a hash map that you access infrequently would be neither spatially nor temporally local, but would still be semantically local. But at the end of the day, do we even care about that case? It is so rare and such high-hanging fruit for prefetching, so why bother?

"Semantic locality, in contrast, directly roots data correlations in semantic states of the program and not on the memory access stream generated by a specific implementation." But why do we care about the data correlations if we are only trying to prefetch for a specific implementation? When would we need to build customized prefetching streams depending on the implementation but using the same program? 

The paper claims that "Concretely, if hardware can capture the semantic relations between the elements in a data structure, regardless of their memory layout, the performance penalty of choosing the simple and straightforward linked implementation will be greatly alleviated." But this is only for prefetching, other parts of the architecture will still prefer the more complicated data structure, right? If it was just about the prefetcher, then the simple implementation is easier to prefetch than the complicated scheme. 

I don't understand the premise of this paper and why we need to move away from spatio-temporal locality. The paper effectively argues why spatial locality is insufficient, but we already knew that. My question is why doesn't temporal locality sufficiently alleviate this problem? 

<b>Unstructured thoughts/personal notes (don't read, only including for completeness sake):</b> 

"semantic locality": elements of a program that are semantically related, even if the layout of memory does not spatially correlate them. For example, a linked list might be an array or a set of pointers which have different spatial localities, but they share semantic locality. What is the difference between semantic locality and temporal locality? 

Using reinforcement learning over machine context we can approximate this semantic locality. 