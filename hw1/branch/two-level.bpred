#include "ooo_cpu.h"

#include <iostream>
#include <map>
#include <string>
#include <iterator>

int k; // number of bits for the counters
int h; // history length
map<int, int> pht; // global pattern history table
int history; // global branch history


/*
 * This method is called once before any other methods,
 * allowing you to initialize anything you want.
 */
void O3_CPU::initialize_branch_predictor() {
  k = 4;
  h = 4;
}

// based on a saturating counter, return whether counter recommends taken or not taken
uint8_t threshold_bit_mask(int n) { 
  return (n >> (k - 1)) & 1;
}

// based on a global history, only take the first h bits because everything above that isn't being stored
int bitmask(int n) {
  return n & ((1 << h) - 1);
}


/*
 * "pc" is the address of the last branch in memory
 */
uint8_t O3_CPU::predict_branch(uint64_t pc)
{
    /*
     * Your prediction code goes here.
     *
     * Return true or false to indicate taken or not taken.
     * Stick to simple structures like arrays to record information,
     * but feel free to experiment with the size of your tables.
     */
  
  return threshold_bit_mask(pht[history]);
}

/*
 * "pc" is the address of the last branch in memory
 * taken is a boolean indicating taken or not taken
 */
void O3_CPU::last_branch_result(uint64_t pc, uint8_t taken) {  

  // update counter for this history
  if(taken) {
    pht[history] = pht[history] + 1;
    pht[history] = min(pht[history], (1 << k) - 1); // 1 << k is 2^k so saturate to that value
  } else {
    pht[history] = pht[history] - 1;
    pht[history] = max(pht[history], 0);
  }

  // update history based on taken
  if(taken) {
    history = bitmask((history << 1) | 1);  
  } else {
    history = bitmask((history << 1) | 0);
  }
}
